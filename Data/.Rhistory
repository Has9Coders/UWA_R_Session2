install.packages(c("blob", "broom", "bslib", "cachem", "cli", "colorspace", "cpp11", "curl", "data.table", "digest", "dplyr", "e1071", "fansi", "future", "gargle", "ggplot2", "googledrive", "googlesheets4", "haven", "Hmisc", "hms", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "insight", "isoband", "knitr", "later", "lidR", "lifecycle", "lubridate", "manipulateWidget", "mapview", "mime", "openssl", "parallelly", "pillar", "proxy", "R6", "Rcpp", "RcppArmadillo", "readr", "reprex", "reticulate", "rgdal", "rgeos", "rgl", "rlas", "rmarkdown", "rvest", "satellite", "sf", "shiny", "stringi", "systemfonts", "tibble", "tidyr", "tinytex", "units", "utf8", "viridis", "xfun"))
require(RgoogleMaps)
newmap <- GetMap(center = c(36.7, -5.9), zoom = 10, destfile = "newmap.png",
maptype = "satellite")
plot(newmap)
library(dismo)
mymap <- gmap("Australia")
newmap <- GetMap(center = c(36.7, -5.9), zoom = 10, destfile = "newmap.png",
maptype = "satellite")
plot(newmap)
# and their dependencies
demo(googleVis)
install.packages("googleVis")
# and their dependencies
demo(googleVis)
demo(googleVis)
demo("googleVis")
ne
PlotOnStaticMap(newmap)
mymap <- gmap("Australia")
gbmap <- gmap(locs.gb, type = "satellite")
PlotOnStaticMap(lat = lo, lon = locs.gb.coords$lon, zoom = 5,
cex= 1.4, pch = 19, col = "red", FUN = points, add = F)
newmap <- GetMap(center = c(-32.07823963117266, 115.93545972736516), zoom = 15, destfile = "newmap.png",
maptype = "satellite")
PlotOnStaticMap(newmap)
newmap <- GetMap(center = c(-32.07823963117266, 115.93545972736516), zoom = 10, destfile = "newmap.png",
maptype = "satellite")
PlotOnStaticMap(newmap)
newmap <- GetMap(center = c(-32.07823963117266, 115.93545972736516), zoom = 20, destfile = "newmap.png",
maptype = "satellite")
PlotOnStaticMap(newmap)
mypolygon <- drawPoly()
newmap <- GetMap(center = c(-32.07823963117266, 115.93545972736516), zoom = 18, destfile = "newmap.png",
maptype = "satellite")
PlotOnStaticMap(newmap)
summary(mypolygon)
mypolygon <- drawPoly()
newmap <- GetMap(center = c(-31.980350610423013, 115.8186768018108), zoom = 18, destfile = "newmap.png",
maptype = "satellite")
PlotOnStaticMap(newmap)
library(dismo)
drawExtent()
mymap <- gmap("Poland")
vignette(dplyr)
library(tidyverse)
vignette(dplyr)
vignette(tibble)
vignette("tibble")
names(mtcars)
head(mtcars)
mtcars
mtcars ?
mtcars /?
mtcars?
help(mtcars)
mtcars?
? mtcars
? mtcars
ls()
list.files()
scales::show_col(colours(), cex_label = .35)
vignette("dplyr")
history()
history(max.show = 15)
history(max.show = Inf)
vignette("dplyr")
as_tibble(iris)
nycflights[:10,]
nycflights13[:10,]
nycflights13
library(downloader)
install.packages("downloader")
library(downloader)
url <- "https://github.com/Has9Coders/UWA_R_Session2/blob/main/Data/msleep_ggplot2.csv"
filename <- "msleep_ggplot2.csv"
if (!file.exists(filename)) download(url,filename)
msleep <- read.csv("msleep_ggplot2.csv")
head(msleep)
head(msleep)
View(msleep)
url <- "https://github.com/Has9Coders/UWA_R_Session2/blob/main/Data/msleep_ggplot2.csv"
filename <- "msleep_ggplot2.csv"
if (!file.exists(filename)) download(url,filename)
msleep <- read.csv("msleep_ggplot2.csv")
msleep <- read.csv("msleep_ggplot2.csv", header = TRUE)
rm(msleep)
library(readr)
msleep_ggplot2 <- read_csv("C:/Users/amhas/Downloads/UWA_R_Session2/Data/msleep_ggplot2.csv")
View(msleep_ggplot2)
urlfile <- "https://github.com/Has9Coders/UWA_R_Session2/blob/main/Data/msleep_ggplot2.csv"
msleep <- read.csv(url(urlfile))
urlfile <- "https://raw.githubusercontent.com/Has9Coders/UWA_R_Session2/main/Data/msleep_ggplot2.csv"
msleep <- read.csv(url(urlfile))
setwd("C:/Users/amhas/Downloads/UWA_R_Session2/Data")
View(msleep)
View(msleep_ggplot2)
url <- "https://raw.githubusercontent.com/Has9Coders/UWA_R_Session2/main/Data/msleep_ggplot2.csv"
msleep <- read.csv(url(urlfile))
library(readr)
url <- "https://raw.githubusercontent.com/Has9Coders/UWA_R_Session2/main/Data/msleep_ggplot2.csv"
msleep <- read.csv(url(urlfile))
urlfile <- "https://raw.githubusercontent.com/Has9Coders/UWA_R_Session2/main/Data/msleep_ggplot2.csv"
msleep <- read.csv(url(urlfile))
head(msleep)
View(msleep)
library(tidyverse)
table1
# and their dependencies
demo(googleVis)
library(dismo)
newmap <- GetMap(center = c(-31.980350610423013, 115.8186768018108), zoom = 18, destfile = "newmap.png",
maptype = "satellite")
newmap <- GetMap(center = c(-31.980350610423013, 115.8186768018108), zoom = 18, destfile = "newmap.png", maptype = "satellite")
plot(newmap)
newmap <- GetMap(center = c(-31.980350610423013, 115.8186768018108), zoom = 18, destfile = "newmap.png", maptype = "satellite")
plot(newmap)
require(RgoogleMaps)
PlotOnStaticMap(newmap)
newmap <- GetMap(center = c(-31.980350610423013, 115.8186768018108), zoom = 12, destfile = "newmap.png", maptype = "satellite")
PlotOnStaticMap(newmap)
newmap <- GetMap(center = c(-31.980350610423013, 115.8186768018108), zoom = 16, destfile = "newmap.png", maptype = "satellite")
PlotOnStaticMap(newmap)
mypolygon <- drawPoly()
plot(mymap)
summary(mypolygon)
? GetMap
newmap <- GetMap(center = c(-31.980350610423013, 115.8186768018108), zoom = 16, destfile = "newmap.png",
size = c(640, 640), maptype = "hybrid")
PlotOnStaticMap(newmap)
newmap <- GetMap(center = c(-31.980350610423013, 115.8186768018108), zoom = 16, destfile = "newmap.png",
size = c(840, 840), maptype = "hybrid")
PlotOnStaticMap(newmap)
newmap <- GetMap(center = c(-31.980350610423013, 115.8186768018108), zoom = 16, maptype="roadmap", destfile = "newmap.png",
size = c(840, 840))#, maptype = "hybrid")
PlotOnStaticMap(newmap)
tmap_mode("view")
library(tmap)    # for static and interactive maps
library(leaflet) # for interactive maps
library(ggplot2) # tidyverse data visualization package
install.packages("tmap")
library(tmap)    # for static and interactive maps
library(leaflet) # for interactive maps
tmap_mode("view")
map_nz
tm_shape(nz) +
tm_fill() +
tm_borders()
tm_shape(mypolygon) +
tm_fill() +
tm_borders()
tm_shape() +
tm_fill() +
tm_borders()
library(sf)
world_asia = world[world$continent == "Oceania", ]
world_asia = world[world$continent == "Oceania", ]
library(sp)
world_sp = as(world, Class = "Spatial")
library(sf)
library(sp)
names(world)
vignette("sf")
tmap_mode("view")
mypolygon <- drawPoly()
vignette(package = "sf") # see which vignettes are available
vignette("sf1")          # an introduction to the package
# To see the matcars data execute
mtcars
? mtcars #  it says "what is mtcars?". Applicable for any R default functions/data
car_data <- mtcars # saving the data in local R environment
car_data <- mtcars # saving the data in local R environment
car_data
View(car_data)
car_data[,2]
car_data[1:8,8]
car_data[1:8,2:8]
getwd() # Get the working directory
ls()    # list the objects in the current workspace/ R.data
edited_data <- car_data[1:8,2:8]
ls()    # list the objects in the current workspace/ R.data
list.files() # list the files in the cwd
# Several options for setting working directory in R studio. One is from menu "Session>Set Working Directory>"
history() # display last 25 commands
save.image("car_data_imported.RData") # save the workspace to the file .RData in the cwd
car_data[1:8,2:8]
head(car_data)  #Lists the first part of the object.
length(car_data)  #Number of elements/components.
dim(car_data)  #Dimensions of an object.
rm(edited_data)
car_partial=car_data[,-8:11]
car_partial<-car_data[,-8:11]
car_partial<-car_data[,-8]
car_data$wt
new_car <-subset(car_data, car_data$wt<=2.0)
View(new_car)
View(new_car)
mode(car_data) #shows data is numeric or string ie. how tha data is stored
class(car_data) # shows if data is Matrix, Data frame, list, factor etc
str(car_data) # show further details attribute of the data i.e. STRUCTURE
summary(car_data) # shows most information with max, min, etc.
summary(car_data$hp) # shows most information with max, min, etc.
? summary()
? summary
?summary
unique(unlist(car_data$gear), use.names=FALSE) # shows only the unique values of an variable
View(car_data)
# To see all the colors in R in one line of code
scales::show_col(colours(), cex_label = .35)
# To see all the colors in R in one line of code
scales::show_col(colours(), cex_label = .5)
# To see all the colors in R in one line of code
scales::show_col(colours(), cex_label = .8)
# To see all the colors in R in one line of code
scales::show_col(colours(), cex_label = .4)
rep(paste("hello", "world"), 5)
rep(paste("hello", "world"), 10)
"hello" %>% paste("world")
"hello"
## [1] "hello world" "hello world" "hello world" "hello world" "hello world"
"hello" %>% paste("world") %>% rep(10)
library(readr)
urlfile <- "https://raw.githubusercontent.com/Has9Coders/UWA_R_Session2/main/Data/msleep_ggplot2.csv"
msleep <- read.csv(url(urlfile))
head(msleep)
head(msleep)
msleep <- read.csv(url(urlfile))
mssleep
msleep
sleepData <- select(msleep, name, sleep_total)
head(sleepData)
head(select(msleep, -name))
head(select(msleep, name:order))
head(select(msleep, starts_with("sl")))
filter(msleep, sleep_total >= 16)
# QUIZ: Filter the rows for mammals that sleep a total of more than 16 hours and have a body weight of greater than 1 kilogram.
filter(msleep, sleep_total >= 16, bodywt>1)
%in%
filter(msleep, order %in% c("Perissodactyla", "Primates"))
msleep %>%
select(name, sleep_total) %>%
head
msleep %>%
select(name, sleep_total)
name_slTotal <- msleep %>%
select(name, sleep_total) %>%
head
name_slTotal <- msleep %>%
select(name, sleep_total)
name_slTotal <- msleep %>%
select(name, sleep_total) %>%
head
name_slTotal <- msleep %>%
select(name, sleep_total)
msleep %>% arrange(order) %>% head
msleep %>%
select(name, order, sleep_total)
msleep %>%
select(name, order, sleep_total) %>%
arrange(order, sleep_total)
msleep %>%
select(name, order, sleep_total) %>%
arrange(order, sleep_total) %>%
filter(sleep_total >= 16)
msleep %>%
mutate(rem_proportion = sleep_rem / sleep_total) %>%
head
msleep %>%
summarise(avg_sleep = mean(sleep_total))
msleep %>%
summarise(avg_sleep = mean(sleep_total),
min_sleep = min(sleep_total),
max_sleep = max(sleep_total),
total = n())
msleep %>%
group_by(order) %>%
summarise(avg_sleep = mean(sleep_total),
min_sleep = min(sleep_total),
max_sleep = max(sleep_total),
total = n())
library(dismo)
require(RgoogleMaps)
newmap <- GetMap(center = c(-31.980350610423013, 115.8186768018108),
zoom = 16, maptype="roadmap",
destfile = "newmap.png",
size = c(840, 840))
PlotOnStaticMap(newmap)
mypolygon <- drawPoly()
summary(mypolygon)
